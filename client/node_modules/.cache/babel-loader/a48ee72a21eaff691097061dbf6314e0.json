{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { ChannelPreviewMessenger } from './ChannelPreviewMessenger';\nimport { useIsChannelMuted } from './hooks/useIsChannelMuted';\nimport { getDisplayImage, getDisplayTitle, getLatestMessagePreview } from './utils';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nexport var ChannelPreview = function (props) {\n  var channel = props.channel,\n      _a = props.Preview,\n      Preview = _a === void 0 ? ChannelPreviewMessenger : _a,\n      channelUpdateCount = props.channelUpdateCount;\n\n  var _b = useChatContext('ChannelPreview'),\n      activeChannel = _b.channel,\n      client = _b.client,\n      setActiveChannel = _b.setActiveChannel;\n\n  var _c = useTranslationContext('ChannelPreview'),\n      t = _c.t,\n      userLanguage = _c.userLanguage;\n\n  var _d = useState(channel.state.messages[channel.state.messages.length - 1]),\n      lastMessage = _d[0],\n      setLastMessage = _d[1];\n\n  var _e = useState(0),\n      unread = _e[0],\n      setUnread = _e[1];\n\n  var isActive = (activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.cid) === channel.cid;\n  var muted = useIsChannelMuted(channel).muted;\n  useEffect(function () {\n    var handleEvent = function (event) {\n      if (!event.cid) return setUnread(0);\n      if (channel.cid === event.cid) setUnread(0);\n    };\n\n    client.on('notification.mark_read', handleEvent);\n    return function () {\n      return client.off('notification.mark_read', handleEvent);\n    };\n  }, []);\n  var refreshUnreadCount = useCallback(function () {\n    if (isActive || muted) {\n      setUnread(0);\n    } else {\n      setUnread(channel.countUnread());\n    }\n  }, [channel, isActive, muted]);\n  useEffect(function () {\n    refreshUnreadCount();\n\n    var handleEvent = function (event) {\n      if (event.message) setLastMessage(event.message);\n      refreshUnreadCount();\n    };\n\n    channel.on('message.new', handleEvent);\n    channel.on('message.updated', handleEvent);\n    channel.on('message.deleted', handleEvent);\n    return function () {\n      channel.off('message.new', handleEvent);\n      channel.off('message.updated', handleEvent);\n      channel.off('message.deleted', handleEvent);\n    };\n  }, [refreshUnreadCount, channelUpdateCount]);\n  if (!Preview) return null;\n  var displayImage = getDisplayImage(channel, client.user);\n  var displayTitle = getDisplayTitle(channel, client.user);\n  var latestMessage = getLatestMessagePreview(channel, t, userLanguage);\n  return React.createElement(Preview, __assign({}, props, {\n    active: isActive,\n    displayImage: displayImage,\n    displayTitle: displayTitle,\n    lastMessage: lastMessage,\n    latestMessage: latestMessage,\n    setActiveChannel: setActiveChannel,\n    unread: unread\n  }));\n};","map":{"version":3,"sources":["C:/Users/Usuario/Documents/GitHub/discord-clone-app/client/node_modules/stream-chat-react/dist/components/ChannelPreview/ChannelPreview.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","React","useCallback","useEffect","useState","ChannelPreviewMessenger","useIsChannelMuted","getDisplayImage","getDisplayTitle","getLatestMessagePreview","useChatContext","useTranslationContext","ChannelPreview","props","channel","_a","Preview","channelUpdateCount","_b","activeChannel","client","setActiveChannel","_c","userLanguage","_d","state","messages","lastMessage","setLastMessage","_e","unread","setUnread","isActive","cid","muted","handleEvent","event","on","off","refreshUnreadCount","countUnread","message","displayImage","user","displayTitle","latestMessage","createElement","active"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { ChannelPreviewMessenger } from './ChannelPreviewMessenger';\nimport { useIsChannelMuted } from './hooks/useIsChannelMuted';\nimport { getDisplayImage, getDisplayTitle, getLatestMessagePreview } from './utils';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nexport var ChannelPreview = function (props) {\n    var channel = props.channel, _a = props.Preview, Preview = _a === void 0 ? ChannelPreviewMessenger : _a, channelUpdateCount = props.channelUpdateCount;\n    var _b = useChatContext('ChannelPreview'), activeChannel = _b.channel, client = _b.client, setActiveChannel = _b.setActiveChannel;\n    var _c = useTranslationContext('ChannelPreview'), t = _c.t, userLanguage = _c.userLanguage;\n    var _d = useState(channel.state.messages[channel.state.messages.length - 1]), lastMessage = _d[0], setLastMessage = _d[1];\n    var _e = useState(0), unread = _e[0], setUnread = _e[1];\n    var isActive = (activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.cid) === channel.cid;\n    var muted = useIsChannelMuted(channel).muted;\n    useEffect(function () {\n        var handleEvent = function (event) {\n            if (!event.cid)\n                return setUnread(0);\n            if (channel.cid === event.cid)\n                setUnread(0);\n        };\n        client.on('notification.mark_read', handleEvent);\n        return function () { return client.off('notification.mark_read', handleEvent); };\n    }, []);\n    var refreshUnreadCount = useCallback(function () {\n        if (isActive || muted) {\n            setUnread(0);\n        }\n        else {\n            setUnread(channel.countUnread());\n        }\n    }, [channel, isActive, muted]);\n    useEffect(function () {\n        refreshUnreadCount();\n        var handleEvent = function (event) {\n            if (event.message)\n                setLastMessage(event.message);\n            refreshUnreadCount();\n        };\n        channel.on('message.new', handleEvent);\n        channel.on('message.updated', handleEvent);\n        channel.on('message.deleted', handleEvent);\n        return function () {\n            channel.off('message.new', handleEvent);\n            channel.off('message.updated', handleEvent);\n            channel.off('message.deleted', handleEvent);\n        };\n    }, [refreshUnreadCount, channelUpdateCount]);\n    if (!Preview)\n        return null;\n    var displayImage = getDisplayImage(channel, client.user);\n    var displayTitle = getDisplayTitle(channel, client.user);\n    var latestMessage = getLatestMessagePreview(channel, t, userLanguage);\n    return (React.createElement(Preview, __assign({}, props, { active: isActive, displayImage: displayImage, displayTitle: displayTitle, lastMessage: lastMessage, latestMessage: latestMessage, setActiveChannel: setActiveChannel, unread: unread })));\n};\n"]},"metadata":{},"sourceType":"module"}