{"ast":null,"code":"import React, { useMemo, useState } from 'react';\nimport { ModalComponent as ModalWrapper } from './ModalWrapper';\nimport { useTranslationContext } from '../../context/TranslationContext';\n\nvar UnMemoizedGallery = function (props) {\n  var images = props.images;\n\n  var _a = useState(0),\n      index = _a[0],\n      setIndex = _a[1];\n\n  var _b = useState(false),\n      modalOpen = _b[0],\n      setModalOpen = _b[1];\n\n  var t = useTranslationContext('Gallery').t;\n\n  var toggleModal = function (selectedIndex) {\n    if (modalOpen) {\n      setModalOpen(false);\n    } else {\n      setIndex(selectedIndex);\n      setModalOpen(true);\n    }\n  };\n\n  var formattedArray = useMemo(function () {\n    return images.map(function (image) {\n      return {\n        original: image.image_url || image.thumb_url || '',\n        originalAlt: 'User uploaded content',\n        source: image.image_url || image.thumb_url || ''\n      };\n    });\n  }, [images]);\n  var renderImages = images.slice(0, 3).map(function (image, i) {\n    return React.createElement(\"button\", {\n      className: 'str-chat__gallery-image',\n      \"data-testid\": 'gallery-image',\n      key: \"gallery-image-\" + i,\n      onClick: function () {\n        return toggleModal(i);\n      }\n    }, React.createElement(\"img\", {\n      alt: 'User uploaded content',\n      src: image.image_url || image.thumb_url\n    }));\n  });\n  return React.createElement(\"div\", {\n    className: \"str-chat__gallery \" + (images.length > 3 ? 'str-chat__gallery--square' : '')\n  }, renderImages, images.length > 3 && React.createElement(\"button\", {\n    className: 'str-chat__gallery-placeholder',\n    onClick: function () {\n      return toggleModal(3);\n    },\n    style: {\n      backgroundImage: \"url(\" + images[3].image_url + \")\"\n    }\n  }, React.createElement(\"p\", null, t('{{ imageCount }} more', {\n    imageCount: images.length - 3\n  }))), React.createElement(ModalWrapper, {\n    images: formattedArray,\n    index: index,\n    modalIsOpen: modalOpen,\n    toggleModal: function () {\n      return setModalOpen(!modalOpen);\n    }\n  }));\n};\n/**\n * Displays images in a simple responsive grid with a light box to view the images.\n */\n\n\nexport var Gallery = React.memo(UnMemoizedGallery);","map":{"version":3,"sources":["C:/Users/Usuario/Documents/GitHub/discord-clone-app/client/node_modules/stream-chat-react/dist/components/Gallery/Gallery.js"],"names":["React","useMemo","useState","ModalComponent","ModalWrapper","useTranslationContext","UnMemoizedGallery","props","images","_a","index","setIndex","_b","modalOpen","setModalOpen","t","toggleModal","selectedIndex","formattedArray","map","image","original","image_url","thumb_url","originalAlt","source","renderImages","slice","i","createElement","className","key","onClick","alt","src","length","style","backgroundImage","imageCount","modalIsOpen","Gallery","memo"],"mappings":"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","sourcesContent":["import React, { useMemo, useState } from 'react';\nimport { ModalComponent as ModalWrapper } from './ModalWrapper';\nimport { useTranslationContext } from '../../context/TranslationContext';\nvar UnMemoizedGallery = function (props) {\n    var images = props.images;\n    var _a = useState(0), index = _a[0], setIndex = _a[1];\n    var _b = useState(false), modalOpen = _b[0], setModalOpen = _b[1];\n    var t = useTranslationContext('Gallery').t;\n    var toggleModal = function (selectedIndex) {\n        if (modalOpen) {\n            setModalOpen(false);\n        }\n        else {\n            setIndex(selectedIndex);\n            setModalOpen(true);\n        }\n    };\n    var formattedArray = useMemo(function () {\n        return images.map(function (image) { return ({\n            original: image.image_url || image.thumb_url || '',\n            originalAlt: 'User uploaded content',\n            source: image.image_url || image.thumb_url || '',\n        }); });\n    }, [images]);\n    var renderImages = images.slice(0, 3).map(function (image, i) { return (React.createElement(\"button\", { className: 'str-chat__gallery-image', \"data-testid\": 'gallery-image', key: \"gallery-image-\" + i, onClick: function () { return toggleModal(i); } },\n        React.createElement(\"img\", { alt: 'User uploaded content', src: image.image_url || image.thumb_url }))); });\n    return (React.createElement(\"div\", { className: \"str-chat__gallery \" + (images.length > 3 ? 'str-chat__gallery--square' : '') },\n        renderImages,\n        images.length > 3 && (React.createElement(\"button\", { className: 'str-chat__gallery-placeholder', onClick: function () { return toggleModal(3); }, style: {\n                backgroundImage: \"url(\" + images[3].image_url + \")\",\n            } },\n            React.createElement(\"p\", null, t('{{ imageCount }} more', {\n                imageCount: images.length - 3,\n            })))),\n        React.createElement(ModalWrapper, { images: formattedArray, index: index, modalIsOpen: modalOpen, toggleModal: function () { return setModalOpen(!modalOpen); } })));\n};\n/**\n * Displays images in a simple responsive grid with a light box to view the images.\n */\nexport var Gallery = React.memo(UnMemoizedGallery);\n"]},"metadata":{},"sourceType":"module"}