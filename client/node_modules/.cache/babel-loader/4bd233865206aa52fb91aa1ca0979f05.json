{"ast":null,"code":"import { useCallback } from 'react';\nimport { useImageUploads } from './useImageUploads';\nimport { useFileUploads } from './useFileUploads';\nimport { useChannelStateContext } from '../../../context/ChannelStateContext';\nimport { generateRandomId } from '../../../utils';\nvar apiMaxNumberOfFiles = 10;\nexport var useAttachments = function (props, state, dispatch, textareaRef) {\n  var noFiles = props.noFiles;\n  var fileUploads = state.fileUploads,\n      imageUploads = state.imageUploads;\n\n  var _a = useChannelStateContext('useAttachments'),\n      maxNumberOfFiles = _a.maxNumberOfFiles,\n      multipleUploads = _a.multipleUploads;\n\n  var _b = useFileUploads(props, state, dispatch),\n      removeFile = _b.removeFile,\n      uploadFile = _b.uploadFile;\n\n  var _c = useImageUploads(props, state, dispatch),\n      removeImage = _c.removeImage,\n      uploadImage = _c.uploadImage; // Number of files that the user can still add. Should never be more than the amount allowed by the API.\n  // If multipleUploads is false, we only want to allow a single upload.\n\n\n  var maxFilesAllowed = !multipleUploads ? 1 : maxNumberOfFiles || apiMaxNumberOfFiles;\n  var numberOfImages = Object.values(imageUploads).filter(function (_a) {\n    var state = _a.state;\n    return state !== 'failed';\n  }).length;\n  var numberOfFiles = Object.values(fileUploads).filter(function (_a) {\n    var state = _a.state;\n    return state !== 'failed';\n  }).length;\n  var numberOfUploads = numberOfImages + numberOfFiles;\n  var maxFilesLeft = maxFilesAllowed - numberOfUploads;\n  var uploadNewFiles = useCallback(function (files) {\n    var _a;\n\n    Array.from(files).slice(0, maxFilesLeft).forEach(function (file) {\n      var id = generateRandomId();\n\n      if (file.type.startsWith('image/') && !file.type.endsWith('.photoshop') // photoshop files begin with 'image/'\n      ) {\n        dispatch({\n          file: file,\n          id: id,\n          state: 'uploading',\n          type: 'setImageUpload'\n        });\n      } else if (file instanceof File && !noFiles) {\n        dispatch({\n          file: file,\n          id: id,\n          state: 'uploading',\n          type: 'setFileUpload'\n        });\n      }\n    });\n    (_a = textareaRef === null || textareaRef === void 0 ? void 0 : textareaRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n  }, [maxFilesLeft, noFiles]);\n  return {\n    maxFilesLeft: maxFilesLeft,\n    numberOfUploads: numberOfUploads,\n    removeFile: removeFile,\n    removeImage: removeImage,\n    uploadFile: uploadFile,\n    uploadImage: uploadImage,\n    uploadNewFiles: uploadNewFiles\n  };\n};","map":{"version":3,"sources":["C:/Users/Usuario/Documents/GitHub/discord-clone-app/client/node_modules/stream-chat-react/dist/components/MessageInput/hooks/useAttachments.js"],"names":["useCallback","useImageUploads","useFileUploads","useChannelStateContext","generateRandomId","apiMaxNumberOfFiles","useAttachments","props","state","dispatch","textareaRef","noFiles","fileUploads","imageUploads","_a","maxNumberOfFiles","multipleUploads","_b","removeFile","uploadFile","_c","removeImage","uploadImage","maxFilesAllowed","numberOfImages","Object","values","filter","length","numberOfFiles","numberOfUploads","maxFilesLeft","uploadNewFiles","files","Array","from","slice","forEach","file","id","type","startsWith","endsWith","File","current","focus"],"mappings":"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","sourcesContent":["import { useCallback } from 'react';\nimport { useImageUploads } from './useImageUploads';\nimport { useFileUploads } from './useFileUploads';\nimport { useChannelStateContext } from '../../../context/ChannelStateContext';\nimport { generateRandomId } from '../../../utils';\nvar apiMaxNumberOfFiles = 10;\nexport var useAttachments = function (props, state, dispatch, textareaRef) {\n    var noFiles = props.noFiles;\n    var fileUploads = state.fileUploads, imageUploads = state.imageUploads;\n    var _a = useChannelStateContext('useAttachments'), maxNumberOfFiles = _a.maxNumberOfFiles, multipleUploads = _a.multipleUploads;\n    var _b = useFileUploads(props, state, dispatch), removeFile = _b.removeFile, uploadFile = _b.uploadFile;\n    var _c = useImageUploads(props, state, dispatch), removeImage = _c.removeImage, uploadImage = _c.uploadImage;\n    // Number of files that the user can still add. Should never be more than the amount allowed by the API.\n    // If multipleUploads is false, we only want to allow a single upload.\n    var maxFilesAllowed = !multipleUploads ? 1 : maxNumberOfFiles || apiMaxNumberOfFiles;\n    var numberOfImages = Object.values(imageUploads).filter(function (_a) {\n        var state = _a.state;\n        return state !== 'failed';\n    })\n        .length;\n    var numberOfFiles = Object.values(fileUploads).filter(function (_a) {\n        var state = _a.state;\n        return state !== 'failed';\n    }).length;\n    var numberOfUploads = numberOfImages + numberOfFiles;\n    var maxFilesLeft = maxFilesAllowed - numberOfUploads;\n    var uploadNewFiles = useCallback(function (files) {\n        var _a;\n        Array.from(files)\n            .slice(0, maxFilesLeft)\n            .forEach(function (file) {\n            var id = generateRandomId();\n            if (file.type.startsWith('image/') &&\n                !file.type.endsWith('.photoshop') // photoshop files begin with 'image/'\n            ) {\n                dispatch({ file: file, id: id, state: 'uploading', type: 'setImageUpload' });\n            }\n            else if (file instanceof File && !noFiles) {\n                dispatch({ file: file, id: id, state: 'uploading', type: 'setFileUpload' });\n            }\n        });\n        (_a = textareaRef === null || textareaRef === void 0 ? void 0 : textareaRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n    }, [maxFilesLeft, noFiles]);\n    return {\n        maxFilesLeft: maxFilesLeft,\n        numberOfUploads: numberOfUploads,\n        removeFile: removeFile,\n        removeImage: removeImage,\n        uploadFile: uploadFile,\n        uploadImage: uploadImage,\n        uploadNewFiles: uploadNewFiles,\n    };\n};\n"]},"metadata":{},"sourceType":"module"}