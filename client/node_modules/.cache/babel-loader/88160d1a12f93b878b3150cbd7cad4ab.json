{"ast":null,"code":"import React, { useEffect, useState } from 'react';\nimport { useChatContext } from '../../../context/ChatContext';\nimport { useChannelStateContext } from '../../../context/ChannelStateContext';\nexport var CooldownTimer = function (props) {\n  var cooldownInterval = props.cooldownInterval,\n      setCooldownRemaining = props.setCooldownRemaining;\n\n  var _a = useState(cooldownInterval),\n      seconds = _a[0],\n      setSeconds = _a[1];\n\n  useEffect(function () {\n    var countdownInterval = setInterval(function () {\n      if (seconds > 0) {\n        setSeconds(seconds - 1);\n      } else {\n        setCooldownRemaining(0);\n      }\n    }, 1000);\n    return function () {\n      return clearInterval(countdownInterval);\n    };\n  });\n  return React.createElement(\"div\", null, seconds === 0 ? null : seconds);\n};\nexport var useCooldownTimer = function () {\n  var latestMessageDatesByChannels = useChatContext('useCooldownTimer').latestMessageDatesByChannels;\n  var channel = useChannelStateContext('useCooldownTimer').channel;\n\n  var _a = channel.data || {},\n      cooldownInterval = _a.cooldown,\n      own_capabilities = _a.own_capabilities;\n\n  var _b = useState(),\n      cooldownRemaining = _b[0],\n      setCooldownRemaining = _b[1];\n\n  var skipCooldown = !(own_capabilities === null || own_capabilities === void 0 ? void 0 : own_capabilities.includes('slow-mode'));\n  useEffect(function () {\n    var latestMessageDate = latestMessageDatesByChannels[channel.cid];\n\n    if (!cooldownInterval || !latestMessageDate) {\n      return;\n    }\n\n    var remainingCooldown = Math.round(cooldownInterval - (new Date().getTime() - latestMessageDate.getTime()) / 1000);\n\n    if (remainingCooldown > 0 && !skipCooldown) {\n      setCooldownRemaining(remainingCooldown);\n    }\n  }, [channel.id, cooldownInterval, latestMessageDatesByChannels[channel.cid]]);\n  return {\n    cooldownInterval: cooldownInterval || 0,\n    cooldownRemaining: cooldownRemaining,\n    setCooldownRemaining: setCooldownRemaining\n  };\n};","map":{"version":3,"sources":["C:/Users/Usuario/Documents/GitHub/discord-clone-app/client/node_modules/stream-chat-react/dist/components/MessageInput/hooks/useCooldownTimer.js"],"names":["React","useEffect","useState","useChatContext","useChannelStateContext","CooldownTimer","props","cooldownInterval","setCooldownRemaining","_a","seconds","setSeconds","countdownInterval","setInterval","clearInterval","createElement","useCooldownTimer","latestMessageDatesByChannels","channel","data","cooldown","own_capabilities","_b","cooldownRemaining","skipCooldown","includes","latestMessageDate","cid","remainingCooldown","Math","round","Date","getTime","id"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,cAAT,QAA+B,8BAA/B;AACA,SAASC,sBAAT,QAAuC,sCAAvC;AACA,OAAO,IAAIC,aAAa,GAAG,UAAUC,KAAV,EAAiB;AACxC,MAAIC,gBAAgB,GAAGD,KAAK,CAACC,gBAA7B;AAAA,MAA+CC,oBAAoB,GAAGF,KAAK,CAACE,oBAA5E;;AACA,MAAIC,EAAE,GAAGP,QAAQ,CAACK,gBAAD,CAAjB;AAAA,MAAqCG,OAAO,GAAGD,EAAE,CAAC,CAAD,CAAjD;AAAA,MAAsDE,UAAU,GAAGF,EAAE,CAAC,CAAD,CAArE;;AACAR,EAAAA,SAAS,CAAC,YAAY;AAClB,QAAIW,iBAAiB,GAAGC,WAAW,CAAC,YAAY;AAC5C,UAAIH,OAAO,GAAG,CAAd,EAAiB;AACbC,QAAAA,UAAU,CAACD,OAAO,GAAG,CAAX,CAAV;AACH,OAFD,MAGK;AACDF,QAAAA,oBAAoB,CAAC,CAAD,CAApB;AACH;AACJ,KAPkC,EAOhC,IAPgC,CAAnC;AAQA,WAAO,YAAY;AAAE,aAAOM,aAAa,CAACF,iBAAD,CAApB;AAA0C,KAA/D;AACH,GAVQ,CAAT;AAWA,SAAOZ,KAAK,CAACe,aAAN,CAAoB,KAApB,EAA2B,IAA3B,EAAiCL,OAAO,KAAK,CAAZ,GAAgB,IAAhB,GAAuBA,OAAxD,CAAP;AACH,CAfM;AAgBP,OAAO,IAAIM,gBAAgB,GAAG,YAAY;AACtC,MAAIC,4BAA4B,GAAGd,cAAc,CAAC,kBAAD,CAAd,CAAmCc,4BAAtE;AACA,MAAIC,OAAO,GAAGd,sBAAsB,CAAC,kBAAD,CAAtB,CAA2Cc,OAAzD;;AACA,MAAIT,EAAE,GAAIS,OAAO,CAACC,IAAR,IACN,EADJ;AAAA,MACSZ,gBAAgB,GAAGE,EAAE,CAACW,QAD/B;AAAA,MACyCC,gBAAgB,GAAGZ,EAAE,CAACY,gBAD/D;;AAEA,MAAIC,EAAE,GAAGpB,QAAQ,EAAjB;AAAA,MAAqBqB,iBAAiB,GAAGD,EAAE,CAAC,CAAD,CAA3C;AAAA,MAAgDd,oBAAoB,GAAGc,EAAE,CAAC,CAAD,CAAzE;;AACA,MAAIE,YAAY,GAAG,EAAEH,gBAAgB,KAAK,IAArB,IAA6BA,gBAAgB,KAAK,KAAK,CAAvD,GAA2D,KAAK,CAAhE,GAAoEA,gBAAgB,CAACI,QAAjB,CAA0B,WAA1B,CAAtE,CAAnB;AACAxB,EAAAA,SAAS,CAAC,YAAY;AAClB,QAAIyB,iBAAiB,GAAGT,4BAA4B,CAACC,OAAO,CAACS,GAAT,CAApD;;AACA,QAAI,CAACpB,gBAAD,IAAqB,CAACmB,iBAA1B,EAA6C;AACzC;AACH;;AACD,QAAIE,iBAAiB,GAAGC,IAAI,CAACC,KAAL,CAAWvB,gBAAgB,GAAG,CAAC,IAAIwB,IAAJ,GAAWC,OAAX,KAAuBN,iBAAiB,CAACM,OAAlB,EAAxB,IAAuD,IAArF,CAAxB;;AACA,QAAIJ,iBAAiB,GAAG,CAApB,IAAyB,CAACJ,YAA9B,EAA4C;AACxChB,MAAAA,oBAAoB,CAACoB,iBAAD,CAApB;AACH;AACJ,GATQ,EASN,CAACV,OAAO,CAACe,EAAT,EAAa1B,gBAAb,EAA+BU,4BAA4B,CAACC,OAAO,CAACS,GAAT,CAA3D,CATM,CAAT;AAUA,SAAO;AACHpB,IAAAA,gBAAgB,EAAEA,gBAAgB,IAAI,CADnC;AAEHgB,IAAAA,iBAAiB,EAAEA,iBAFhB;AAGHf,IAAAA,oBAAoB,EAAEA;AAHnB,GAAP;AAKH,CAtBM","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useChatContext } from '../../../context/ChatContext';\nimport { useChannelStateContext } from '../../../context/ChannelStateContext';\nexport var CooldownTimer = function (props) {\n    var cooldownInterval = props.cooldownInterval, setCooldownRemaining = props.setCooldownRemaining;\n    var _a = useState(cooldownInterval), seconds = _a[0], setSeconds = _a[1];\n    useEffect(function () {\n        var countdownInterval = setInterval(function () {\n            if (seconds > 0) {\n                setSeconds(seconds - 1);\n            }\n            else {\n                setCooldownRemaining(0);\n            }\n        }, 1000);\n        return function () { return clearInterval(countdownInterval); };\n    });\n    return React.createElement(\"div\", null, seconds === 0 ? null : seconds);\n};\nexport var useCooldownTimer = function () {\n    var latestMessageDatesByChannels = useChatContext('useCooldownTimer').latestMessageDatesByChannels;\n    var channel = useChannelStateContext('useCooldownTimer').channel;\n    var _a = (channel.data ||\n        {}), cooldownInterval = _a.cooldown, own_capabilities = _a.own_capabilities;\n    var _b = useState(), cooldownRemaining = _b[0], setCooldownRemaining = _b[1];\n    var skipCooldown = !(own_capabilities === null || own_capabilities === void 0 ? void 0 : own_capabilities.includes('slow-mode'));\n    useEffect(function () {\n        var latestMessageDate = latestMessageDatesByChannels[channel.cid];\n        if (!cooldownInterval || !latestMessageDate) {\n            return;\n        }\n        var remainingCooldown = Math.round(cooldownInterval - (new Date().getTime() - latestMessageDate.getTime()) / 1000);\n        if (remainingCooldown > 0 && !skipCooldown) {\n            setCooldownRemaining(remainingCooldown);\n        }\n    }, [channel.id, cooldownInterval, latestMessageDatesByChannels[channel.cid]]);\n    return {\n        cooldownInterval: cooldownInterval || 0,\n        cooldownRemaining: cooldownRemaining,\n        setCooldownRemaining: setCooldownRemaining,\n    };\n};\n"]},"metadata":{},"sourceType":"module"}