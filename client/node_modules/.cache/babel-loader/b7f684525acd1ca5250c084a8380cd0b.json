{"ast":null,"code":"var _isArray = /*#__PURE__*/require(\"./_isArray.js\");\n\nvar _isTransformer = /*#__PURE__*/require(\"./_isTransformer.js\");\n/**\n * Returns a function that dispatches with different strategies based on the\n * object in list position (last argument). If it is an array, executes [fn].\n * Otherwise, if it has a function with one of the given method names, it will\n * execute that function (functor case). Otherwise, if it is a transformer,\n * uses transducer created by [transducerCreator] to return a new transformer\n * (transducer case).\n * Otherwise, it will default to executing [fn].\n *\n * @private\n * @param {Array} methodNames properties to check for a custom implementation\n * @param {Function} transducerCreator transducer factory if object is transformer\n * @param {Function} fn default ramda implementation\n * @return {Function} A function that dispatches on object in list position\n */\n\n\nfunction _dispatchable(methodNames, transducerCreator, fn) {\n  return function () {\n    if (arguments.length === 0) {\n      return fn();\n    }\n\n    var obj = arguments[arguments.length - 1];\n\n    if (!_isArray(obj)) {\n      var idx = 0;\n\n      while (idx < methodNames.length) {\n        if (typeof obj[methodNames[idx]] === 'function') {\n          return obj[methodNames[idx]].apply(obj, Array.prototype.slice.call(arguments, 0, -1));\n        }\n\n        idx += 1;\n      }\n\n      if (_isTransformer(obj)) {\n        var transducer = transducerCreator.apply(null, Array.prototype.slice.call(arguments, 0, -1));\n        return transducer(obj);\n      }\n    }\n\n    return fn.apply(this, arguments);\n  };\n}\n\nmodule.exports = _dispatchable;","map":{"version":3,"sources":["C:/Users/Usuario/Documents/GitHub/discord-clone-app/client/node_modules/ramda/src/internal/_dispatchable.js"],"names":["_isArray","require","_isTransformer","_dispatchable","methodNames","transducerCreator","fn","arguments","length","obj","idx","apply","Array","prototype","slice","call","transducer","module","exports"],"mappings":"AAAA,IAAIA,QAAQ,GACZ,aACAC,OAAO,CAAC,eAAD,CAFP;;AAIA,IAAIC,cAAc,GAClB,aACAD,OAAO,CAAC,qBAAD,CAFP;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASE,aAAT,CAAuBC,WAAvB,EAAoCC,iBAApC,EAAuDC,EAAvD,EAA2D;AACzD,SAAO,YAAY;AACjB,QAAIC,SAAS,CAACC,MAAV,KAAqB,CAAzB,EAA4B;AAC1B,aAAOF,EAAE,EAAT;AACD;;AAED,QAAIG,GAAG,GAAGF,SAAS,CAACA,SAAS,CAACC,MAAV,GAAmB,CAApB,CAAnB;;AAEA,QAAI,CAACR,QAAQ,CAACS,GAAD,CAAb,EAAoB;AAClB,UAAIC,GAAG,GAAG,CAAV;;AAEA,aAAOA,GAAG,GAAGN,WAAW,CAACI,MAAzB,EAAiC;AAC/B,YAAI,OAAOC,GAAG,CAACL,WAAW,CAACM,GAAD,CAAZ,CAAV,KAAiC,UAArC,EAAiD;AAC/C,iBAAOD,GAAG,CAACL,WAAW,CAACM,GAAD,CAAZ,CAAH,CAAsBC,KAAtB,CAA4BF,GAA5B,EAAiCG,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BR,SAA3B,EAAsC,CAAtC,EAAyC,CAAC,CAA1C,CAAjC,CAAP;AACD;;AAEDG,QAAAA,GAAG,IAAI,CAAP;AACD;;AAED,UAAIR,cAAc,CAACO,GAAD,CAAlB,EAAyB;AACvB,YAAIO,UAAU,GAAGX,iBAAiB,CAACM,KAAlB,CAAwB,IAAxB,EAA8BC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BR,SAA3B,EAAsC,CAAtC,EAAyC,CAAC,CAA1C,CAA9B,CAAjB;AACA,eAAOS,UAAU,CAACP,GAAD,CAAjB;AACD;AACF;;AAED,WAAOH,EAAE,CAACK,KAAH,CAAS,IAAT,EAAeJ,SAAf,CAAP;AACD,GAzBD;AA0BD;;AAEDU,MAAM,CAACC,OAAP,GAAiBf,aAAjB","sourcesContent":["var _isArray =\n/*#__PURE__*/\nrequire(\"./_isArray.js\");\n\nvar _isTransformer =\n/*#__PURE__*/\nrequire(\"./_isTransformer.js\");\n/**\n * Returns a function that dispatches with different strategies based on the\n * object in list position (last argument). If it is an array, executes [fn].\n * Otherwise, if it has a function with one of the given method names, it will\n * execute that function (functor case). Otherwise, if it is a transformer,\n * uses transducer created by [transducerCreator] to return a new transformer\n * (transducer case).\n * Otherwise, it will default to executing [fn].\n *\n * @private\n * @param {Array} methodNames properties to check for a custom implementation\n * @param {Function} transducerCreator transducer factory if object is transformer\n * @param {Function} fn default ramda implementation\n * @return {Function} A function that dispatches on object in list position\n */\n\n\nfunction _dispatchable(methodNames, transducerCreator, fn) {\n  return function () {\n    if (arguments.length === 0) {\n      return fn();\n    }\n\n    var obj = arguments[arguments.length - 1];\n\n    if (!_isArray(obj)) {\n      var idx = 0;\n\n      while (idx < methodNames.length) {\n        if (typeof obj[methodNames[idx]] === 'function') {\n          return obj[methodNames[idx]].apply(obj, Array.prototype.slice.call(arguments, 0, -1));\n        }\n\n        idx += 1;\n      }\n\n      if (_isTransformer(obj)) {\n        var transducer = transducerCreator.apply(null, Array.prototype.slice.call(arguments, 0, -1));\n        return transducer(obj);\n      }\n    }\n\n    return fn.apply(this, arguments);\n  };\n}\n\nmodule.exports = _dispatchable;"]},"metadata":{},"sourceType":"script"}