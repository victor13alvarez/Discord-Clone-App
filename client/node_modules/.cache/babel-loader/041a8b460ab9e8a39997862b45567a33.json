{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sanitizeUrl = void 0;\nvar invalidProtocolRegex = /^([^\\w]*)(javascript|data|vbscript)/im;\nvar htmlEntitiesRegex = /&#(\\w+)(^\\w|;)?/g;\nvar ctrlCharactersRegex = /[\\u0000-\\u001F\\u007F-\\u009F\\u2000-\\u200D\\uFEFF]/gim;\nvar urlSchemeRegex = /^([^:]+):/gm;\nvar relativeFirstCharacters = [\".\", \"/\"];\n\nfunction isRelativeUrlWithoutProtocol(url) {\n  return relativeFirstCharacters.indexOf(url[0]) > -1;\n} // adapted from https://stackoverflow.com/a/29824550/2601552\n\n\nfunction decodeHtmlCharacters(str) {\n  return str.replace(htmlEntitiesRegex, function (match, dec) {\n    return String.fromCharCode(dec);\n  });\n}\n\nfunction sanitizeUrl(url) {\n  var sanitizedUrl = decodeHtmlCharacters(url || \"\").replace(ctrlCharactersRegex, \"\").trim();\n\n  if (!sanitizedUrl) {\n    return \"about:blank\";\n  }\n\n  if (isRelativeUrlWithoutProtocol(sanitizedUrl)) {\n    return sanitizedUrl;\n  }\n\n  var urlSchemeParseResults = sanitizedUrl.match(urlSchemeRegex);\n\n  if (!urlSchemeParseResults) {\n    return sanitizedUrl;\n  }\n\n  var urlScheme = urlSchemeParseResults[0];\n\n  if (invalidProtocolRegex.test(urlScheme)) {\n    return \"about:blank\";\n  }\n\n  return sanitizedUrl;\n}\n\nexports.sanitizeUrl = sanitizeUrl;","map":{"version":3,"sources":["C:/Users/Usuario/Documents/GitHub/discord-clone-app/client/node_modules/@braintree/sanitize-url/dist/index.js"],"names":["Object","defineProperty","exports","value","sanitizeUrl","invalidProtocolRegex","htmlEntitiesRegex","ctrlCharactersRegex","urlSchemeRegex","relativeFirstCharacters","isRelativeUrlWithoutProtocol","url","indexOf","decodeHtmlCharacters","str","replace","match","dec","String","fromCharCode","sanitizedUrl","trim","urlSchemeParseResults","urlScheme","test"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,WAAR,GAAsB,KAAK,CAA3B;AACA,IAAIC,oBAAoB,GAAG,uCAA3B;AACA,IAAIC,iBAAiB,GAAG,kBAAxB;AACA,IAAIC,mBAAmB,GAAG,oDAA1B;AACA,IAAIC,cAAc,GAAG,aAArB;AACA,IAAIC,uBAAuB,GAAG,CAAC,GAAD,EAAM,GAAN,CAA9B;;AACA,SAASC,4BAAT,CAAsCC,GAAtC,EAA2C;AACvC,SAAOF,uBAAuB,CAACG,OAAxB,CAAgCD,GAAG,CAAC,CAAD,CAAnC,IAA0C,CAAC,CAAlD;AACH,C,CACD;;;AACA,SAASE,oBAAT,CAA8BC,GAA9B,EAAmC;AAC/B,SAAOA,GAAG,CAACC,OAAJ,CAAYT,iBAAZ,EAA+B,UAAUU,KAAV,EAAiBC,GAAjB,EAAsB;AACxD,WAAOC,MAAM,CAACC,YAAP,CAAoBF,GAApB,CAAP;AACH,GAFM,CAAP;AAGH;;AACD,SAASb,WAAT,CAAqBO,GAArB,EAA0B;AACtB,MAAIS,YAAY,GAAGP,oBAAoB,CAACF,GAAG,IAAI,EAAR,CAApB,CACdI,OADc,CACNR,mBADM,EACe,EADf,EAEdc,IAFc,EAAnB;;AAGA,MAAI,CAACD,YAAL,EAAmB;AACf,WAAO,aAAP;AACH;;AACD,MAAIV,4BAA4B,CAACU,YAAD,CAAhC,EAAgD;AAC5C,WAAOA,YAAP;AACH;;AACD,MAAIE,qBAAqB,GAAGF,YAAY,CAACJ,KAAb,CAAmBR,cAAnB,CAA5B;;AACA,MAAI,CAACc,qBAAL,EAA4B;AACxB,WAAOF,YAAP;AACH;;AACD,MAAIG,SAAS,GAAGD,qBAAqB,CAAC,CAAD,CAArC;;AACA,MAAIjB,oBAAoB,CAACmB,IAArB,CAA0BD,SAA1B,CAAJ,EAA0C;AACtC,WAAO,aAAP;AACH;;AACD,SAAOH,YAAP;AACH;;AACDlB,OAAO,CAACE,WAAR,GAAsBA,WAAtB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sanitizeUrl = void 0;\nvar invalidProtocolRegex = /^([^\\w]*)(javascript|data|vbscript)/im;\nvar htmlEntitiesRegex = /&#(\\w+)(^\\w|;)?/g;\nvar ctrlCharactersRegex = /[\\u0000-\\u001F\\u007F-\\u009F\\u2000-\\u200D\\uFEFF]/gim;\nvar urlSchemeRegex = /^([^:]+):/gm;\nvar relativeFirstCharacters = [\".\", \"/\"];\nfunction isRelativeUrlWithoutProtocol(url) {\n    return relativeFirstCharacters.indexOf(url[0]) > -1;\n}\n// adapted from https://stackoverflow.com/a/29824550/2601552\nfunction decodeHtmlCharacters(str) {\n    return str.replace(htmlEntitiesRegex, function (match, dec) {\n        return String.fromCharCode(dec);\n    });\n}\nfunction sanitizeUrl(url) {\n    var sanitizedUrl = decodeHtmlCharacters(url || \"\")\n        .replace(ctrlCharactersRegex, \"\")\n        .trim();\n    if (!sanitizedUrl) {\n        return \"about:blank\";\n    }\n    if (isRelativeUrlWithoutProtocol(sanitizedUrl)) {\n        return sanitizedUrl;\n    }\n    var urlSchemeParseResults = sanitizedUrl.match(urlSchemeRegex);\n    if (!urlSchemeParseResults) {\n        return sanitizedUrl;\n    }\n    var urlScheme = urlSchemeParseResults[0];\n    if (invalidProtocolRegex.test(urlScheme)) {\n        return \"about:blank\";\n    }\n    return sanitizedUrl;\n}\nexports.sanitizeUrl = sanitizeUrl;\n"]},"metadata":{},"sourceType":"script"}