{"ast":null,"code":"import React, { useCallback } from 'react';\nimport { AutoCompleteTextarea } from '../AutoCompleteTextarea';\nimport { LoadingIndicator } from '../Loading/LoadingIndicator';\nimport { useMessageInputContext } from '../../context/MessageInputContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nimport { useComponentContext } from '../../context/ComponentContext';\n\nvar UnMemoizedChatAutoComplete = function (props) {\n  var _a = useComponentContext('ChatAutoComplete'),\n      SuggestionItem = _a.AutocompleteSuggestionItem,\n      SuggestionList = _a.AutocompleteSuggestionList;\n\n  var t = useTranslationContext('ChatAutoComplete').t;\n  var messageInput = useMessageInputContext('ChatAutoComplete');\n  var cooldownRemaining = messageInput.cooldownRemaining,\n      disabled = messageInput.disabled,\n      emojiIndex = messageInput.emojiIndex,\n      innerRef = messageInput.textareaRef;\n  var placeholder = props.placeholder || t('Type your message');\n  var emojiReplace = props.wordReplace ? function (word) {\n    var _a;\n\n    return (_a = props.wordReplace) === null || _a === void 0 ? void 0 : _a.call(props, word, emojiIndex);\n  } : function (word) {\n    var found = (emojiIndex === null || emojiIndex === void 0 ? void 0 : emojiIndex.search(word)) || [];\n    var emoji = found.filter(Boolean).slice(0, 10).find(function (_a) {\n      var emoticons = _a.emoticons;\n      return !!(emoticons === null || emoticons === void 0 ? void 0 : emoticons.includes(word));\n    });\n    if (!emoji || !('native' in emoji)) return null;\n    return emoji.native;\n  };\n  var updateInnerRef = useCallback(function (ref) {\n    if (innerRef) {\n      innerRef.current = ref;\n    }\n  }, [innerRef]);\n  return React.createElement(AutoCompleteTextarea, {\n    additionalTextareaProps: messageInput.additionalTextareaProps,\n    \"aria-label\": cooldownRemaining ? t('Slow Mode ON') : placeholder,\n    className: 'str-chat__textarea__textarea',\n    closeCommandsList: messageInput.closeCommandsList,\n    closeMentionsList: messageInput.closeMentionsList,\n    containerClassName: 'str-chat__textarea',\n    disabled: disabled || !!cooldownRemaining,\n    disableMentions: messageInput.disableMentions,\n    dropdownClassName: 'str-chat__emojisearch',\n    grow: messageInput.grow,\n    handleSubmit: props.handleSubmit || messageInput.handleSubmit,\n    innerRef: updateInnerRef,\n    itemClassName: 'str-chat__emojisearch__item',\n    keycodeSubmitKeys: messageInput.keycodeSubmitKeys,\n    listClassName: 'str-chat__emojisearch__list',\n    loadingComponent: LoadingIndicator,\n    maxRows: messageInput.maxRows,\n    minChar: 0,\n    onBlur: props.onBlur,\n    onChange: props.onChange || messageInput.handleChange,\n    onFocus: props.onFocus,\n    onPaste: props.onPaste || messageInput.onPaste,\n    placeholder: cooldownRemaining ? t('Slow Mode ON') : placeholder,\n    replaceWord: emojiReplace,\n    rows: props.rows || 1,\n    showCommandsList: messageInput.showCommandsList,\n    showMentionsList: messageInput.showMentionsList,\n    SuggestionItem: SuggestionItem,\n    SuggestionList: SuggestionList,\n    trigger: messageInput.autocompleteTriggers || {},\n    value: props.value || messageInput.text\n  });\n};\n\nexport var ChatAutoComplete = React.memo(UnMemoizedChatAutoComplete);","map":{"version":3,"sources":["C:/Users/Usuario/Documents/GitHub/discord-clone-app/client/node_modules/stream-chat-react/dist/components/ChatAutoComplete/ChatAutoComplete.js"],"names":["React","useCallback","AutoCompleteTextarea","LoadingIndicator","useMessageInputContext","useTranslationContext","useComponentContext","UnMemoizedChatAutoComplete","props","_a","SuggestionItem","AutocompleteSuggestionItem","SuggestionList","AutocompleteSuggestionList","t","messageInput","cooldownRemaining","disabled","emojiIndex","innerRef","textareaRef","placeholder","emojiReplace","wordReplace","word","call","found","search","emoji","filter","Boolean","slice","find","emoticons","includes","native","updateInnerRef","ref","current","createElement","additionalTextareaProps","className","closeCommandsList","closeMentionsList","containerClassName","disableMentions","dropdownClassName","grow","handleSubmit","itemClassName","keycodeSubmitKeys","listClassName","loadingComponent","maxRows","minChar","onBlur","onChange","handleChange","onFocus","onPaste","replaceWord","rows","showCommandsList","showMentionsList","trigger","autocompleteTriggers","value","text","ChatAutoComplete","memo"],"mappings":"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","sourcesContent":["import React, { useCallback } from 'react';\nimport { AutoCompleteTextarea } from '../AutoCompleteTextarea';\nimport { LoadingIndicator } from '../Loading/LoadingIndicator';\nimport { useMessageInputContext } from '../../context/MessageInputContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nimport { useComponentContext } from '../../context/ComponentContext';\nvar UnMemoizedChatAutoComplete = function (props) {\n    var _a = useComponentContext('ChatAutoComplete'), SuggestionItem = _a.AutocompleteSuggestionItem, SuggestionList = _a.AutocompleteSuggestionList;\n    var t = useTranslationContext('ChatAutoComplete').t;\n    var messageInput = useMessageInputContext('ChatAutoComplete');\n    var cooldownRemaining = messageInput.cooldownRemaining, disabled = messageInput.disabled, emojiIndex = messageInput.emojiIndex, innerRef = messageInput.textareaRef;\n    var placeholder = props.placeholder || t('Type your message');\n    var emojiReplace = props.wordReplace\n        ? function (word) { var _a; return (_a = props.wordReplace) === null || _a === void 0 ? void 0 : _a.call(props, word, emojiIndex); }\n        : function (word) {\n            var found = (emojiIndex === null || emojiIndex === void 0 ? void 0 : emojiIndex.search(word)) || [];\n            var emoji = found\n                .filter(Boolean)\n                .slice(0, 10)\n                .find(function (_a) {\n                var emoticons = _a.emoticons;\n                return !!(emoticons === null || emoticons === void 0 ? void 0 : emoticons.includes(word));\n            });\n            if (!emoji || !('native' in emoji))\n                return null;\n            return emoji.native;\n        };\n    var updateInnerRef = useCallback(function (ref) {\n        if (innerRef) {\n            innerRef.current = ref;\n        }\n    }, [innerRef]);\n    return (React.createElement(AutoCompleteTextarea, { additionalTextareaProps: messageInput.additionalTextareaProps, \"aria-label\": cooldownRemaining ? t('Slow Mode ON') : placeholder, className: 'str-chat__textarea__textarea', closeCommandsList: messageInput.closeCommandsList, closeMentionsList: messageInput.closeMentionsList, containerClassName: 'str-chat__textarea', disabled: disabled || !!cooldownRemaining, disableMentions: messageInput.disableMentions, dropdownClassName: 'str-chat__emojisearch', grow: messageInput.grow, handleSubmit: props.handleSubmit || messageInput.handleSubmit, innerRef: updateInnerRef, itemClassName: 'str-chat__emojisearch__item', keycodeSubmitKeys: messageInput.keycodeSubmitKeys, listClassName: 'str-chat__emojisearch__list', loadingComponent: LoadingIndicator, maxRows: messageInput.maxRows, minChar: 0, onBlur: props.onBlur, onChange: props.onChange || messageInput.handleChange, onFocus: props.onFocus, onPaste: props.onPaste || messageInput.onPaste, placeholder: cooldownRemaining ? t('Slow Mode ON') : placeholder, replaceWord: emojiReplace, rows: props.rows || 1, showCommandsList: messageInput.showCommandsList, showMentionsList: messageInput.showMentionsList, SuggestionItem: SuggestionItem, SuggestionList: SuggestionList, trigger: messageInput.autocompleteTriggers || {}, value: props.value || messageInput.text }));\n};\nexport var ChatAutoComplete = React.memo(UnMemoizedChatAutoComplete);\n"]},"metadata":{},"sourceType":"module"}